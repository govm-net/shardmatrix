---
description:
globs:
alwaysApply: false
---

# ShardMatrix 区块链项目架构文档完善规则

## 项目概述
ShardMatrix 是一个高性能的分片区块链平台，专注于可扩展性和效率。

## 沟通目标
- 与用户深入讨论和完善整个区块链架构设计
- 确保架构文档的完整性和准确性
- 优化系统性能和可扩展性

## 架构讨论重点

### 1. 第一阶段核心组件（基础功能）
- **区块结构**: 区块头设计、交易列表、时间戳、哈希链接
- **交易系统**: 交易格式、验证规则、签名机制
- **共识机制**: 简单共识算法选择（PoW/PoS/PBFT）
- **网络层**: 基础P2P通信、节点发现、区块同步
- **存储层**: 本地数据存储、状态管理

### 2. 基础性能要求
- **吞吐量**: 基础TPS目标，单链处理能力
- **延迟**: 交易确认时间，区块生成间隔
- **资源利用**: 基础资源消耗控制

### 3. 基础安全性
- **攻击防护**: 基础双花攻击防护
- **密钥管理**: 基础密钥生成和签名验证
- **数据完整性**: 哈希验证、数字签名

### 4. 可扩展性考虑
- **模块化设计**: 为未来分片预留接口
- **插件化架构**: 支持共识算法切换
- **API设计**: 为高级功能预留扩展点

## 文档结构建议

### 技术架构文档
```
docs/
├── architecture/
│   ├── overview.md          # 架构概览
│   ├── consensus.md         # 共识机制
│   ├── sharding.md          # 分片设计
│   ├── network.md           # 网络架构
│   ├── storage.md           # 存储设计
│   └── security.md          # 安全机制
├── api/
│   ├── rpc.md              # RPC接口文档
│   └── sdk.md              # SDK使用指南
└── deployment/
    ├── docker.md           # Docker部署
    └── kubernetes.md       # K8s部署
```

### 代码架构（第一阶段）
```
cmd/                    # 主程序入口
├── node/              # 区块链节点程序
└── client/            # 客户端程序

pkg/                   # 核心包
├── block/             # 区块相关
├── transaction/       # 交易处理
├── consensus/         # 共识算法
├── network/           # 网络通信
├── storage/           # 数据存储
├── crypto/            # 密码学
├── wallet/            # 钱包功能
└── api/              # API接口

internal/              # 内部包
├── config/            # 配置管理
├── logger/            # 日志系统
└── utils/             # 工具函数
```

## 需求确认和设计流程

### 1. 分阶段开发策略
- **第一阶段**: 实现区块链基本功能（区块创建、交易处理、简单共识）
- **第二阶段**: 引入分片机制和高级共识算法
- **第三阶段**: 性能优化和高级特性
- **第四阶段**: 生产环境部署和运维

### 2. 需求确认流程
#### 2.1 功能需求确认
- **核心功能**: 确认第一阶段需要实现的具体功能
  - 区块结构设计（区块头、交易列表、时间戳等）
  - 交易格式和验证规则
  - 简单的共识机制选择（PoW/PoS/PBFT等）
  - 钱包功能（密钥生成、交易签名）
  - 网络通信（P2P节点发现、区块同步）

#### 2.2 技术需求确认
- **性能要求**: 目标TPS、区块确认时间、网络延迟
- **安全要求**: 攻击防护级别、密钥管理方式
- **扩展性要求**: 未来分片支持、智能合约支持
- **部署要求**: 开发环境、测试环境、生产环境

#### 2.3 架构设计确认
- **模块划分**: 确认各模块职责和接口
- **数据流**: 确认交易处理、区块生成、共识达成流程
- **存储方案**: 确认区块数据、状态数据存储方式
- **网络拓扑**: 确认节点类型、通信协议

### 3. 设计确认流程
#### 3.1 架构设计评审
- 提供架构设计文档供用户评审
- 使用Mermaid绘制系统架构图
- 列出技术选型的优缺点对比
- 确认设计是否符合需求

#### 3.2 接口设计确认
- 定义RPC接口规范
- 确认API参数和返回值格式
- 设计错误处理机制
- 确认接口版本管理策略

#### 3.3 数据结构确认
- 确认区块、交易、账户等核心数据结构
- 定义序列化格式（JSON/Protobuf等）
- 确认数据库表结构设计
- 确认缓存策略

### 4. 实现确认流程
#### 4.1 开发计划确认
- 制定详细的开发里程碑
- 确认各模块开发优先级
- 定义代码规范和测试要求
- 确认代码审查流程

#### 4.2 测试策略确认
- 单元测试覆盖范围
- 集成测试场景设计
- 性能测试指标和基准
- 安全测试要求

#### 4.3 部署方案确认
- 开发环境搭建方案
- 测试环境配置要求
- 生产环境部署策略
- 监控和日志方案

## 技术栈建议

### 核心语言和框架
- **Go**: 主要开发语言
- **Protocol Buffers**: 数据序列化
- **gRPC**: 服务间通信
- **LevelDB/RocksDB**: 本地存储
- **Redis**: 缓存层

### 网络和通信
- **libp2p**: P2P网络库
- **WebSocket**: 实时通信
- **HTTP/2**: API接口

### 监控和运维
- **Prometheus**: 监控指标
- **Grafana**: 可视化面板
- **Jaeger**: 分布式追踪
- **ELK Stack**: 日志管理

## 质量保证
- 所有架构决策需要用户确认
- 提供多个技术方案供选择
- 包含性能对比和权衡分析
- 考虑向后兼容性和升级路径

## 需求确认模板

### 功能需求确认清单
```
□ 区块结构设计
  □ 区块头字段定义（版本、时间戳、难度、nonce等）
  □ 交易列表格式
  □ 区块大小限制
  □ 区块生成间隔

□ 交易系统设计
  □ 交易格式（输入、输出、签名）
  □ 交易验证规则
  □ 手续费机制
  □ 交易池管理

□ 共识机制选择
  □ PoW（工作量证明）
  □ PoS（权益证明）
  □ PBFT（实用拜占庭容错）
  □ 其他自定义共识

□ 网络通信
  □ P2P协议选择
  □ 节点发现机制
  □ 区块同步策略
  □ 网络拓扑结构

□ 存储方案
  □ 本地数据库选择（LevelDB/RocksDB/BoltDB）
  □ 区块数据存储格式
  □ 状态数据管理
  □ 索引策略

□ 钱包功能
  □ 密钥生成算法
  □ 地址格式
  □ 交易签名
  □ 余额查询
```

### 技术需求确认清单
```
□ 性能要求
  □ 目标TPS（每秒交易数）
  □ 区块确认时间
  □ 网络延迟要求
  □ 资源消耗限制

□ 安全要求
  □ 密钥管理方式
  □ 攻击防护级别
  □ 数据加密要求
  □ 审计日志要求

□ 扩展性要求
  □ 未来分片支持
  □ 智能合约支持
  □ 跨链互操作
  □ 插件化架构

□ 部署要求
  □ 开发环境配置
  □ 测试环境要求
  □ 生产环境部署
  □ 监控和运维
```

## 持续改进
- 定期回顾架构设计
- 根据用户反馈调整方案
- 关注区块链技术发展趋势
- 持续优化性能和安全性
